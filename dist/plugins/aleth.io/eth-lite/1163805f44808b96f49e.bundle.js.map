{"version":3,"sources":["webpack://__aleth_io__ethLite/../node_modules/@alethio/explorer-ui/src/box/block/BlockHashBox.tsx","webpack://__aleth_io__ethLite/../node_modules/@alethio/explorer-ui/src/box/block/ParentHashBox.tsx","webpack://__aleth_io__ethLite/../node_modules/@alethio/ui/src/data/ByteSize.tsx","webpack://__aleth_io__ethLite/../node_modules/@alethio/explorer-ui/src/box/block/BlockSizeBox.tsx","webpack://__aleth_io__ethLite/./app/eth-lite/module/block/blockDetails/BlockDetails.tsx"],"names":["BlockHashBox_BlockHashBox","external_react_","[object Object]","children","linkTo","this","props","HashLinkValueBox","colors","theme","background","blockColorCode","text","blockBoxText","ParentHashBox","parentHashBoxBg","parentHashBoxText","ByteSize_ByteSize","format","replace","NumberFormatter","locale","BlockSizeBox","bytes","translations","ValueBox","__webpack_require__","d","__webpack_exports__","BlockDetails_BlockDetails","translation","tr","blockDetails","block","slots","LayoutSection","useWrapper","LayoutRow","minWidth","LayoutRowItem","Label","get","BlockNumberBox","noLink","id","creationTime","TimeElapsedBox","timestamp","BlockDetailsSlotType","Confirmations","hash","parentHash","parentId","uncles","length","fullRow","map","uncleHash","idx","UncleHashBox","key","nonce","byteSize","Txs","ExtraData","autoHeight","DecodedHexData","data","extraData"],"mappings":"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","file":"1163805f44808b96f49e.bundle.js","sourcesContent":["import * as React from \"react\";\nimport { HashLinkValueBox } from \"../HashLinkValueBox\";\nimport { ITheme } from \"../../theme/ITheme\";\n\ninterface IBlockHashBoxProps {\n    children: string;\n    linkTo?: string;\n}\n\nexport class BlockHashBox extends React.Component<IBlockHashBoxProps> {\n    render() {\n        let { children, linkTo } = this.props;\n        return (\n            <HashLinkValueBox\n                colors={(theme: ITheme) => ({\n                    background: theme.colors.blockColorCode,\n                    text: theme.colors.blockBoxText\n                })}\n                linkTo={linkTo}\n            >\n                { children }\n            </HashLinkValueBox>\n        );\n    }\n}\n","import * as React from \"react\";\nimport { HashLinkValueBox, IHashLinkValueBoxProps } from \"../HashLinkValueBox\";\nimport { ITheme } from \"../../theme/ITheme\";\n\ninterface IParentHashBoxProps {\n    linkTo?: IHashLinkValueBoxProps[\"linkTo\"];\n    children: string;\n}\n\nexport const ParentHashBox: React.StatelessComponent<IParentHashBoxProps> = ({ children, linkTo }) => (\n    <HashLinkValueBox\n        colors={(theme: ITheme) => ({\n            background: theme.colors.parentHashBoxBg,\n            text: theme.colors.parentHashBoxText\n        })}\n        linkTo={linkTo}\n    >\n        { children }\n    </HashLinkValueBox>\n);\n","import * as React from \"react\";\r\nimport { NumberFormatter } from \"../util/internal/locale/NumberFormatter\";\r\n\r\nexport interface IByteSizeProps {\r\n    children: number;\r\n    locale: string;\r\n    /** Localized string: (e.g. \"%d bytes\") */\r\n    format: string;\r\n}\r\n\r\n/** Formats numbers that represent data sizes (in bytes) */\r\nexport class ByteSize extends React.Component<IByteSizeProps> {\r\n    render() {\r\n        return (\r\n            this.props.format.replace(/%d/, new NumberFormatter().format(this.props.children, this.props.locale))\r\n        );\r\n    }\r\n}\r\n","import * as React from \"react\";\nimport { ValueBox } from \"@alethio/ui/lib/layout/content/box/ValueBox\";\nimport { ByteSize } from \"@alethio/ui/lib/data/ByteSize\";\n\nexport interface IBlockSizeBoxProps {\n    bytes: number;\n    locale: string;\n    translations: {\n        bytes: string;\n    };\n}\n\nexport const BlockSizeBox: React.StatelessComponent<IBlockSizeBoxProps> = ({ bytes, locale, translations }) => (\n    <ValueBox><ByteSize format={\"%d \" + translations.bytes} locale={locale}>{bytes}</ByteSize></ValueBox>\n);\n","import * as React from \"react\";\r\nimport { LayoutRow } from \"@alethio/ui/lib/layout/content/LayoutRow\";\r\nimport { LayoutRowItem } from \"@alethio/ui/lib/layout/content/LayoutRowItem\";\r\nimport { Label } from \"@alethio/ui/lib/data/Label\";\r\n// import { NumberBox } from \"@alethio/ui/lib/data/box/NumberBox\";\r\n// import { GasUsedValueBox } from \"@alethio/ui/lib/data/box/GasUsedValueBox\";\r\n// import { DifficultyBox } from \"@alethio/ui/lib/data/box/DifficultyBox\";\r\nimport { DecodedHexData } from \"@alethio/ui/lib/data/hex/DecodedHexData\";\r\n// import { HexData } from \"@alethio/ui/lib/data/hex/HexData\";\r\n// import { HashValueBox } from \"@alethio/ui/lib/data/box/HashValueBox\";\r\nimport { LayoutSection } from \"@alethio/ui/lib/layout/content/LayoutSection\";\r\nimport { BlockNumberBox } from \"@alethio/explorer-ui/lib/box/block/BlockNumberBox\";\r\nimport { TimeElapsedBox } from \"app/shared/component/TimeElapsedBox\";\r\nimport { BlockHashBox } from \"@alethio/explorer-ui/lib/box/block/BlockHashBox\";\r\nimport { ParentHashBox } from \"@alethio/explorer-ui/lib/box/block/ParentHashBox\";\r\nimport { BlockSizeBox } from \"@alethio/explorer-ui/lib/box/block/BlockSizeBox\";\r\n// import { AddressHashBox } from \"@alethio/explorer-ui/lib/box/account/AddressHashBox\";\r\nimport { UncleHashBox } from \"@alethio/explorer-ui/lib/box/uncle/UncleHashBox\";\r\n// import { UnclesCountBox } from \"@alethio/explorer-ui/lib/box/block/UnclesCountBox\";\r\nimport { ITranslation } from \"plugin-api/ITranslation\";\r\nimport { IBlockDetails } from \"app/eth-lite/data/block/details/IBlockDetails\";\r\nimport { BlockDetailsSlotType } from \"./BlockDetailsSlotType\";\r\n\r\nexport interface IBlockDetailsProps {\r\n    blockDetails: IBlockDetails;\r\n    translation: ITranslation;\r\n    locale: string;\r\n    slots: Record<BlockDetailsSlotType, JSX.Element[]>;\r\n}\r\n\r\nexport class BlockDetails extends React.PureComponent<IBlockDetailsProps> {\r\n    render() {\r\n        let { translation: tr, blockDetails: block, slots, locale } = this.props;\r\n\r\n        return <>\r\n            <LayoutSection useWrapper>\r\n                <LayoutRow minWidth={900}>\r\n                    <LayoutRowItem>\r\n                        <Label>{tr.get(\"blockView.content.blockNumber.label\")}</Label>\r\n                        <BlockNumberBox noLink>{block.id}</BlockNumberBox>\r\n                    </LayoutRowItem>\r\n                    <LayoutRowItem>\r\n                        { block.creationTime ?\r\n                        <>\r\n                        <Label>{tr.get(\"blockView.content.blockCreationTime.label\")}</Label>\r\n                        <TimeElapsedBox timestamp={block.creationTime}\r\n                            translation={tr}\r\n                            locale={locale} />\r\n                        </>\r\n                        : null }\r\n                        { slots[BlockDetailsSlotType.Confirmations] }\r\n                    </LayoutRowItem>\r\n                    {/* <LayoutRowItem>\r\n                        <Label>{tr.get(\"blockView.content.uncles.label\")}</Label>\r\n                        <UnclesCountBox locale={locale}>{block.uncles.length}</UnclesCountBox>\r\n                    </LayoutRowItem> */}\r\n                </LayoutRow>\r\n                <LayoutRow minWidth={760}>\r\n                    <LayoutRowItem>\r\n                        <Label>{tr.get(\"general.hash\")}</Label>\r\n                        <BlockHashBox>{block.hash}</BlockHashBox>\r\n                    </LayoutRowItem>\r\n                    {block.parentHash ?\r\n                    <LayoutRowItem>\r\n                        <Label>{tr.get(\"blockView.content.parentHash.label\")}</Label>\r\n                        <ParentHashBox\r\n                            linkTo={block.parentId !== void 0 ?\r\n                                `page://aleth.io/block?blockNumber=${block.parentId}` :\r\n                                void 0}\r\n                        >\r\n                            {block.parentHash}\r\n                        </ParentHashBox>\r\n                    </LayoutRowItem> : null }\r\n                </LayoutRow>\r\n                { block.uncles.length ?\r\n                <LayoutRow>\r\n                    <LayoutRowItem fullRow>\r\n                        <Label>{tr.get(\"blockView.content.uncles.label\")}</Label>\r\n                        {block.uncles.map((uncleHash, idx) => (\r\n                            <UncleHashBox key={uncleHash}\r\n                                linkTo={`page://aleth.io/uncle?blockNumber=${block.id}&uncleIndex=${idx}`}\r\n                            >\r\n                                {uncleHash}\r\n                            </UncleHashBox>\r\n                        ))}\r\n                    </LayoutRowItem>\r\n                </LayoutRow>\r\n                : null }\r\n                { block.nonce ?\r\n                <LayoutRow minWidth={710}>\r\n                    {/* <LayoutRowItem>\r\n                        <Label>{tr.get(\"general.nonce\")}</Label>\r\n                        <HashValueBox>{block.nonce}</HashValueBox>\r\n                    </LayoutRowItem> */}\r\n                    <LayoutRowItem>\r\n                        <Label>{tr.get(\"blockView.content.blockSize.label\")}</Label>\r\n                        <BlockSizeBox bytes={block.byteSize} locale={locale} translations={{\r\n                            bytes: tr.get(\"general.bytes\")\r\n                        }} />\r\n                    </LayoutRowItem>\r\n                </LayoutRow>\r\n                : null }\r\n            </LayoutSection>\r\n            { slots[BlockDetailsSlotType.Txs]}\r\n            <LayoutSection useWrapper>\r\n                {/* <LayoutRow minWidth={760}>\r\n                    { block.sha3uncles ?\r\n                    <LayoutRowItem>\r\n                        <Label>{tr.get(\"blockView.content.sha3Uncles.label\")}</Label>\r\n                        <HashValueBox>{block.sha3uncles}</HashValueBox>\r\n                    </LayoutRowItem>\r\n                    : null }\r\n                </LayoutRow>\r\n                <LayoutRow>\r\n                    <LayoutRowItem fullRow>\r\n                        <Label>{tr.get(\"blockView.content.beneficiary.label\")}</Label>\r\n                        <AddressHashBox>{block.beneficiaryAddress}</AddressHashBox>\r\n                    </LayoutRowItem>\r\n                </LayoutRow>\r\n                <LayoutRow minWidth={760}>\r\n                    <LayoutRowItem>\r\n                        <Label>{tr.get(\"general.gasLimit\")}</Label>\r\n                        <NumberBox value={block.gasLimit} locale={locale} />\r\n                    </LayoutRowItem>\r\n                    <LayoutRowItem>\r\n                        <Label>{tr.get(\"general.gasUsed\")}</Label>\r\n                        <GasUsedValueBox value={block.gasUsed} limit={block.gasLimit} locale={locale} />\r\n                    </LayoutRowItem>\r\n                </LayoutRow>\r\n                <LayoutRow>\r\n                    <LayoutRowItem>\r\n                        <Label>{tr.get(\"blockView.content.difficulty.label\")}</Label>\r\n                        <DifficultyBox value={block.difficulty} locale={locale} />\r\n                    </LayoutRowItem>\r\n                </LayoutRow> */}\r\n                { slots && slots[BlockDetailsSlotType.ExtraData] ||\r\n                <LayoutRow>\r\n                    <LayoutRowItem autoHeight>\r\n                        <Label>{tr.get(\"blockView.content.extraData.label\")}</Label>\r\n                        <DecodedHexData data={block.extraData} />\r\n                    </LayoutRowItem>\r\n                </LayoutRow> }\r\n                {/* { block.mixHash ?\r\n                <LayoutRow minWidth={760}>\r\n                    <LayoutRowItem>\r\n                        <Label>{tr.get(\"blockView.content.mixHash.label\")}</Label>\r\n                        <HashValueBox>{block.mixHash}</HashValueBox>\r\n                    </LayoutRowItem>\r\n                </LayoutRow>\r\n                : null } */}\r\n            </LayoutSection>\r\n            {/* <LayoutSection useWrapper>\r\n                <LayoutRow>\r\n                    <LayoutRowItem fullRow autoHeight>\r\n                        <Label>{tr.get(\"blockView.content.logsBloom.label\")}</Label>\r\n                        <HexData data={block.logsBloom} />\r\n                    </LayoutRowItem>\r\n                </LayoutRow>\r\n            </LayoutSection> */}\r\n        </>;\r\n    }\r\n}\r\n"],"sourceRoot":""}